@model dynamic
@{
    List<App.Models.Category> categories = Model.categories;
    int level = Model.level;
    string prefix = String.Concat(Enumerable.Repeat("&nbsp;&nbsp;&nbsp;&nbsp;", level));

}

@if (categories.Count > 0)
{

    @foreach (var item in categories)
    {
        <tr>
            <td>
                @* @Html.DisplayFor(modelItem => item.Title) *@
                @Html.Raw(@prefix)
                <a asp-action="Details" asp-route-id="@item.Id">@item.Title</a>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Content)
            </td>
            <td>

                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-warning">Sá»­a</a>
                <a href="#" onclick="showPopup('warning-popup')">Delete</a>
                <form id="delete-form" style="display: none;" asp-action="Delete" asp-route-id="@item.Id">
                    <input type="submit" value="Confirm">
                </form>
            </td>
        </tr>
        @if (item.CategoryChildren != null && item.CategoryChildren.Count > 0)
        {
            @await Component.InvokeAsync("RowTreeCategory", new { categories = item.CategoryChildren.ToList(), level = level + 1 })
        }
    }
}
<div id="warning-popup" class="popup">
    <div class="popup-content">
        <p>Are you sure you want to delete this item?</p>
        <button onclick="document.getElementById('delete-form').submit()">Yes</button>
        <button onclick="hidePopup('warning-popup')">No</button>
    </div>
</div>
<script>
    function showPopup(id) {
        document.getElementById(id).classList.add('show');
    }

    function hidePopup(id) {
        document.getElementById(id).classList.remove('show');
    }
</script>
<style>
    .popup {
        position: fixed;
        /* Positioning and size */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        /* Center the content */
        align-items: center;
        justify-content: center;
        z-index: 1000;
        /* Sit on top of everything else on the page */
        background-color: rgba(0, 0, 0, 0.5);
        /* Black background with opacity */
        opacity: 0;
        /* Hidden by default */
        visibility: hidden;
        /* Hidden by default */
        transform: scale(1.1);
        /* Slightly zoomed out by default */
        transition: all 0.3s;
        /* Transition effect */
    }

    .popup.show {
        opacity: 1;
        /* Show the popup */
        visibility: visible;
        transform: scale(1);
        /* Zoom in */
    }

    .popup-content {
        width: 70%;
        /* Popup content width */
        background-color: white;
        /* Background color */
        padding: 20px;
        /* Some padding */
        border-radius: 5px;
        /* Rounded corners */
        box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.1);
        /* Shadow for depth */
    }
</style>